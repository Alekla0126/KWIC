package Filters;

import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Queue;

/**
 *
 * @author Alejandro Lagunes
 */
public class Shifter extends Filter
{
    // -----------------------------------------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------------------------------------
    protected Object process(Object entry)
    {
        // -------------------------------------------------------------------------------------------------------------
        ArrayList<String> words = (ArrayList) entry;
        String result = null;
        ArrayList<String> results = new ArrayList<>();
        Queue<String> queue = new LinkedList<>();
        // -------------------------------------------------------------------------------------------------------------
        int index = words.size()-1;
        while(index >= 0)
        {
            queue.offer(words.get(index));
            index--;
        }
        // -------------------------------------------------------------------------------------------------------------
        index = 0;
        // -------------------------------------------------------------------------------------------------------------
        while(index < words.size())
        {
            // --------------------------------------------------------------------------------------------------------'
            int j = 0;
            while(j < words.size())
            {
                if(j == 0)
                {
                    result = queue.peek();
                    queue.offer(queue.poll());
                }
                else
                {
                    result = queue.peek() + " " + result;
                    queue.offer(queue.poll());
                }
                j++;
            }
            // ---------------------------------------------------------------------------------------------------------
            queue.offer(queue.poll());
            results.add(result);
            // ---------------------------------------------------------------------------------------------------------
            index++;
        }
        // -------------------------------------------------------------------------------------------------------------
        return results;
    }
    // -----------------------------------------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------------------------------------
    protected Object process(Object entry1, Object entry2)
    {
        return null;
    }
    // -----------------------------------------------------------------------------------------------------------------
    // -----------------------------------------------------------------------------------------------------------------
}